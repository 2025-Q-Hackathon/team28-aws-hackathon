import axios from 'axios';

const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'https://your-api-gateway-url.amazonaws.com/dev';

const api = axios.create({
  baseURL: API_BASE_URL,
  headers: {
    'Content-Type': 'application/json',
  },
});

export interface SpeechAnalysisRequest {
  messages: string[];
}

export interface SpeechAnalysisResponse {
  formal_ratio: number;
  emoji_ratio: number;
  avg_length: number;
  total_messages: number;
  tone: string;
  speech_style: string;
}

export interface ChatAnalysisRequest {
  context: string;
  situation: string;
  user_style: {
    formal_ratio: number;
    emoji_ratio: number;
    avg_length: number;
  };
  partner_info?: {
    name: string;
    age: string;
    relationship: string;
    personality: string;
  };
}

export interface ResponseOption {
  type: string;
  message: string;
  explanation: string;
  risk_level: number;
  confidence: number;
}

export interface ChatAnalysisResponse {
  responses: ResponseOption[];
}

export const apiService = {
  // ÎßêÌà¨ Î∂ÑÏÑù
  analyzeSpeech: async (data: SpeechAnalysisRequest): Promise<SpeechAnalysisResponse> => {
    try {
      const response = await api.post('/analyze-speech', data);
      return response.data;
    } catch (error) {
      console.error('Speech analysis error:', error);
      // ÏûÑÏãú Î™©ÏóÖ Îç∞Ïù¥ÌÑ∞ Î∞òÌôò
      return {
        formal_ratio: 0.3,
        emoji_ratio: 0.4,
        avg_length: 25.5,
        total_messages: data.messages.length,
        tone: 'positive',
        speech_style: 'casual_friendly'
      };
    }
  },

  // ÎãµÎ≥Ä ÏÉùÏÑ±
  generateResponses: async (data: ChatAnalysisRequest): Promise<ChatAnalysisResponse> => {
    try {
      const response = await api.post('/analyze', data);
      return response.data;
    } catch (error) {
      console.error('Response generation error:', error);
      // ÏûÑÏãú Î™©ÏóÖ Îç∞Ïù¥ÌÑ∞ Î∞òÌôò
      return {
        responses: [
          {
            type: 'ÏïàÏ†ÑÌòï',
            message: 'Í∑∏Î†áÍµ¨ÎÇò! Ïû¨Î∞åÍ≤†Îã§ üòä',
            explanation: 'Î¨¥ÎÇúÌïòÍ≥† ÏïàÏ†ÑÌïú Î∞òÏùëÏúºÎ°ú Î∂ÄÎã¥ÏùÑ Ï£ºÏßÄ ÏïäÏäµÎãàÎã§.',
            risk_level: 1,
            confidence: 0.9
          },
          {
            type: 'ÌëúÏ§ÄÌòï',
            message: 'Ïò§ Ï¢ãÏùÄÎç∞? ÎÇòÎèÑ Í¥ÄÏã¨ÏûàÏñ¥!',
            explanation: 'Ï†ÅÎãπÌïú Í¥ÄÏã¨ÏùÑ ÌëúÌòÑÌïòÎ©∞ ÎåÄÌôîÎ•º Ïù¥Ïñ¥Í∞ëÎãàÎã§.',
            risk_level: 2,
            confidence: 0.8
          },
          {
            type: 'ÎåÄÎã¥Ìòï',
            message: 'ÏôÑÏ†Ñ Ï¢ãÏïÑ! Í∞ôÏù¥ Ìï¥Î≥ºÍπå? üòç',
            explanation: 'Ï†ÅÍ∑πÏ†ÅÏù∏ Ìò∏Í∞êÏùÑ ÎìúÎü¨ÎÇ¥Î©∞ Ìï®ÍªòÌïòÍ≥† Ïã∂Îã§Îäî ÏùòÏÇ¨Î•º ÌëúÌòÑÌï©ÎãàÎã§.',
            risk_level: 4,
            confidence: 0.7
          }
        ]
      };
    }
  },

  // ÌååÏùº ÏóÖÎ°úÎìú
  uploadFile: async (fileContent: string, fileName: string) => {
    try {
      const response = await api.post('/upload', {
        file_content: btoa(fileContent), // base64 Ïù∏ÏΩîÎî©
        file_name: fileName
      });
      return response.data;
    } catch (error) {
      console.error('File upload error:', error);
      throw error;
    }
  }
};
