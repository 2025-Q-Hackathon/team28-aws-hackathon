AWSTemplateFormatVersion: '2010-09-09'
Description: 'Love Q - DSQL Serverless Architecture'

Parameters:
  Environment:
    Type: String
    Default: dev

Resources:
  # DSQL Cluster
  DSQLCluster:
    Type: AWS::DSQL::Cluster
    Properties:
      DeletionProtectionEnabled: false
      Tags:
        - Key: Name
          Value: !Sub love-q-dsql-${Environment}
        - Key: Project
          Value: LoveQ

  # S3 Bucket for file storage
  FileStorageBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub love-q-files-${Environment}-${AWS::AccountId}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - Id: DeleteAfter7Days
            Status: Enabled
            ExpirationInDays: 7
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # Lambda Execution Role with DSQL permissions
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DSQLAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dsql:DbConnect
                  - dsql:DbConnectAdmin
                Resource: !GetAtt DSQLCluster.ClusterArn
        - PolicyName: BedrockS3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource: 
                  - '*'
                  - !Sub '${FileStorageBucket}/*'

  # API Gateway
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub love-q-api-${Environment}
      Description: Love Q API Gateway

  # Lambda Functions
  ChatAnalysisFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub love-q-chat-analysis-${Environment}
      Runtime: python3.11
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      Code:
        ZipFile: |
          import json
          def handler(event, context):
              return {'statusCode': 200, 'body': json.dumps('Chat Analysis with DSQL')}
      Environment:
        Variables:
          DSQL_CLUSTER_ARN: !GetAtt DSQLCluster.ClusterArn
          S3_BUCKET: !Ref FileStorageBucket

  ResponseGenerationFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub love-q-response-gen-${Environment}
      Runtime: python3.11
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      Code:
        ZipFile: |
          import json
          def handler(event, context):
              return {'statusCode': 200, 'body': json.dumps('Response Generation with DSQL')}
      Environment:
        Variables:
          DSQL_CLUSTER_ARN: !GetAtt DSQLCluster.ClusterArn

  FileUploadFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub love-q-file-upload-${Environment}
      Runtime: python3.11
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          def handler(event, context):
              return {'statusCode': 200, 'body': json.dumps('File Upload with DSQL')}
      Environment:
        Variables:
          S3_BUCKET: !Ref FileStorageBucket
          DSQL_CLUSTER_ARN: !GetAtt DSQLCluster.ClusterArn

  # CloudFront Distribution
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt FrontendBucket.DomainName
            S3OriginConfig:
              OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${CloudFrontOAI}
          - Id: ApiOrigin
            DomainName: !Sub ${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com
            CustomOriginConfig:
              HTTPPort: 443
              OriginProtocolPolicy: https-only
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods: [GET, HEAD, OPTIONS, PUT, POST, PATCH, DELETE]
          CachedMethods: [GET, HEAD]
          ForwardedValues:
            QueryString: false
        CacheBehaviors:
          - PathPattern: /api/*
            TargetOriginId: ApiOrigin
            ViewerProtocolPolicy: https-only
            AllowedMethods: [GET, HEAD, OPTIONS, PUT, POST, PATCH, DELETE]
            CachedMethods: [GET, HEAD]
            ForwardedValues:
              QueryString: true
        Enabled: true
        DefaultRootObject: index.html

  CloudFrontOAI:
    Type: AWS::CloudFront::OriginAccessIdentity
    Properties:
      OriginAccessIdentityConfig:
        Comment: !Sub Love Q OAI ${Environment}

  FrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub love-q-frontend-${Environment}-${AWS::AccountId}
      WebsiteConfiguration:
        IndexDocument: index.html

Outputs:
  DSQLClusterArn:
    Description: DSQL Cluster ARN
    Value: !GetAtt DSQLCluster.ClusterArn
    Export:
      Name: !Sub love-q-dsql-cluster-${Environment}

  DSQLClusterEndpoint:
    Description: DSQL Cluster Endpoint
    Value: !GetAtt DSQLCluster.Endpoint
    Export:
      Name: !Sub love-q-dsql-endpoint-${Environment}

  ApiGatewayUrl:
    Value: !Sub https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod

  CloudFrontUrl:
    Value: !GetAtt CloudFrontDistribution.DomainName

  S3Bucket:
    Value: !Ref FileStorageBucket

  EstimatedMonthlyCost:
    Description: Estimated monthly cost with DSQL
    Value: "$1-5 (vs $40+ with RDS Aurora)"
